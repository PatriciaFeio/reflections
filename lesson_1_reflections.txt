How did viewing a diff between two versions of a file help you see the bug that
was introduced?

Comparing changes between two files with git diff is an extremely useful tool for any developer.
It gives a developer a quick way to catch bugs in a file.
When working with a small file, it might seem easy to look directly to the file to try and find any bug,
but when working with large files it's more productive to use such a tool, specially if we want to preseve our own sanity.



How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

Having access to the history of previous versions of a file we're working at enables us to easily make changes to our work by going back to an older version of the file.
It keeps work organized and prevents the deletion of a file version that could be important for finding an error or for testing matters.



What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

A commit in Git is made manually whereas Google Docs automatically saves different versions of a file. 
The advantage of a manual commit is the option of choosing the proper version to save, instead of constantly saving versions that are of no use because they have no significant modifications.
On the other hand, one might forget to save an important file version or even save a version that has no special interest. But well, that's the danger to all tasks that are human-dependent.



Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

Git is a version control system developed to support all kinds of files and to allow multiple file savings in one commit which is a good feature for working with code because usually a developer's work consists of multiple files all connected to each other.
Contrarily, Google Docs was not designed to work with source code files, but to work with document files, spreadsheets and presentation files that aren't connected to each other as source code files can be.
So, in Google Docs we don't really need to save multiple files in one commit.



How can you use the commands git log and git diff to view the history of files?

git log shows us commit logs, i.e. shows the commits that lead up to the state of the currently checked out branch. These commits are shown in reverse chronological order.
(www.thegeekstuff.com)

git diff shows changes between commits using the IDs of two different commits we want to compare.



How might using version control make you more confident to make changes that
could break something?

Using git checkout we can checkout a commit and in doing so we are able to return to the files we had before that commit was made.
So, if there is any mistake or bug in a version of a file we can always return to the state before the file with the mistake.
This gives a developer a sense of security when changing something in a file because the developer can always return to the previous file version.



Now that you have your workspace set up, what do you want to try using Git for?

First, I want to use Git to be able to add files to Github in order to have a portfolio to show to future employers.
Second, I want to learn how to use Git because it's an important tool in tech working environment.

