When would you want to create a remote repository rather than keeping all your work local?

	I would want to create a local repository in three situations (that I can remember of):

	To publish a portfolio so I can exemplify my skills, training and experiences;
	To contribute to open source projects;
	When working collaboratively on a project.



Why might you want to always pull changes manually rather than having Git automatically 
stay up-to-date with your remote repository?

	Things automatically done are not the best option because we can lose track of 
	what is really important to pull.



Describe the differences between forks, clones, and branches. 
When would you use one instead of another?

	Forks are copies of someone else's repository to our GitHub account.

	Clones are copies of a GitHub repository to our local repo.

	When you want to add a new feature or fix a bug — no matter how big or how small — you need a new line of 
	development. A new branch is then created from the main branch as a reference to a commit and all the 
	necessary commits are made within the new branch. There can be as many branches as we consider needed to develop a project. After the features are well tested or a bug fixed we can then merge the branch or branches into the main branch. 



What is the benefit of having a copy of the last known state of the remote stored locally?

	Allows us to compare the remote repository while working at our branch locally using git log and git diff.
	We can also merge more easily our own commits to the remote merging it locally before pushing to the remote.



How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	I could exchange modified files with any colaborator and we could also append an information file regarding the changes made, so it would be easier to look for the actual changes in the files. Of course, if someone 
	made any change by mistake or forgot to mention a change in the appended information file, the final work 
	could get compromised.
	Not using Git or GitHub for collaboration might look easier for someone that doesn't know how to work with version control, but on the other hand errors are more likely to occur if someone misses any change made 
	between files.



When would you want to make changes in a separate branch rather than directly in master?  
What benefits does each approach have?

	Changing primarily a separate branch allows us to test new features without compromising the whole work if 
	they don't work properly. Moreover, when working cooperatively, we can propose changes in a branch and not 
	in the master branch of a repository by creating pull requests. This way, we make sure that the master 
	branch only contains finished and approved work. 
	On the other hand, small corrections like misspellings can be made directly in the master branch. In cases like this there's no risk of breaking anything.





